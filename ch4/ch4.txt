1.树的遍历：先序遍历，中序遍历，后序遍历
2.二叉查找树：对于二叉树中的每一个节点X，其左子树中的所有节点的关键字都比X节点的关键字小，
  其右子树中的所有的关键字都比X节点的关键字大。
  二叉树操作：
    1)初始化空树
    2)查找：利用递归，在节点的左右子树中进行查找
    3)插入：首先判断节点是否为空，如果为空就创建节点进行插入。否则，根据节点关键字的大小
    调用递归该函数。
    4)删除：
           当节点为叶节点时，直接删除节点
           当节点有一个字树时，将该节点的父节点与子树之间相连
           当节点有两个子树时，一般时利用右子树的最小节点的数据代替该节点并递归地删除那
           个节点
      如果删除的节点比较少，可以使用惰性删除。
    5)以上操作的平均运行时间都是O(log n)
3.AVL树:AVL树是一个每个节点的左子树和右子树的高度相差最多是1的二叉查找树。
  AVL树的操作：
    ******二叉树调整方法：从插入和删除的节点开始上逐个节点计算该节点的左右子树的高度差超过2
    的结点X：
        如果是对X节点的左儿子的左子树或者右儿子的右子树进行一次插入，则使用单旋转的方式进行
        调整AVL树
        如果是对X节点的左儿子的右子树或者右儿子的左子树进行一次插入，则使用双旋转的方式进行
        调整AVL树

    1)插入：按照二叉查找树的方式插入节点，按照如上的方法进行调整
    2)删除：按照二叉查找树的方式删除节点，按照如上的方法进行调整
    参考文章：http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html
4.B树 --- 通常用于外查找
  M阶B树定义：
  1.根节点或者是一个叶结点或者是一个右2～M个儿子
  2.除根节点和叶结点之外的所有非叶结点的儿子数在(m+1)/2和M之间
  3.所有的树叶都在相同的深度上
  B树的插入和删除导致的节点合并和分离
